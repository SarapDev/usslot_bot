use std::sync::Arc;

use super::{bot::Bot, types::Message};
use crate::{services::balance::BalanceService, BotError, Result};

pub async fn handle_welcome_command(bot: Arc<Bot>, chat_id: i64) -> Result<()> {
    let text = "
üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Ç–æ–≤–∞—Ä–∏—â! üî•

–¢—ã –∑–∞—à–µ–ª –≤ —Å–ª–æ—Ç—ã —Å–æ–≤–µ—Ç—Å–∫–æ–≥–æ —Å–æ—é–∑–∞!

<b>–ß—Ç–æ —Ç—ã —Ç—É—Ç –º–æ–∂–µ—à—å?</b>
‚îî –°—Ç–∞–≤–∏—Ç—å —Ç–∞–ª–æ–Ω—ã (üéü) –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–¥–Ω–æ—Ä—É–∫–æ–≥–æ –±–∞–Ω–¥–∏—Ç–∞! (üé∞Ô∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è). –ß—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–º–∞–π–ª–∏–∫ üé∞Ô∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏–ª—Å—è —Ä–æ–ª–ª.
‚îî –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å, –≤—ã–ø–æ–ª–Ω–∏–≤ –∫–æ–º–∞–Ω–¥—É /balance

üî•–•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞, —Ç–æ–≤—Ä–∏—â—å! üî•   
";

    bot.send_message(chat_id, text).await
}

pub async fn handle_balance_command(bot: Arc<Bot>, service: Arc<BalanceService>, msg: &Message) -> Result<()> { 
    let user = match &msg.from {
        Some(user) => user,
        None  => return Err(BotError::Telegram("User not found".to_string())), 
    };
    let balance = match service.handle(user.id).await {
       Ok(Some(balance)) => balance,
       Ok(None) => "–í–∞—à –±–∞–ª–∞–Ω—Å –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω :—Å".to_string(),
       Err(e) => return Err(BotError::Telegram(format!("Error while getting balance {:?}", e))), 
    }; 

    bot.send_message(msg.chat.id, &balance).await
}
