use crate::telergam::types::Dice;

const DEFAULT_BET: i32 = 5;

const LOW_WIN: i32 = 3;
const WIN: i32 = 7;
const BIG_WIN: i32 = 15;

pub struct DiceService {
}

/// Handling dice results
impl DiceService {
    pub fn new() -> Self {
        Self {}
    }

    pub fn handle(&self, dice: &Dice) -> Option<String> {
        match dice.emoji.as_str() {
            "üéØ"  => None, 
            "üèÄ"  => None, 
            "‚öΩ"  => None, 
            "üé≥"  => None,
            "üé≤"  => None, 
            "üé∞"  => {
                let base = "–¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ 5 üéü, –¢–æ–≤–∞—Ä–∏—â!\n";

                match dice.value {
                    1 | 22 | 43 => Some(format!(
                                "{}3 –≤ —Ä—è–¥! –ü–∞—Ä—Ç–∏—è –±—É–¥–µ—Ç –≥–æ—Ä–¥–∏—Ç—Å—è!\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª: {}üéü", 
                                base, 
                                DEFAULT_BET * WIN
                            )),
                    16 | 32 | 48 => Some(format!(
                                "{}–ù–µ–±–æ–ª—å—à–∞—è –ø–æ–±–µ–¥–∞ –≤–æ –∏–º—è –∫–æ–º–º—É–Ω–∏–∑–º–∞!\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª: {}üéü",
                                base, 
                                DEFAULT_BET * LOW_WIN,
                            )),
                    64 => Some(format!(
                            "{}–ü–∞—Ä—Ç–∏—è –≤—ã—Å–æ–∫–æ —Ü–µ–Ω–∏—Ç —Ç–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ, —Ç–æ–≤–∞—Ä–∏—â!\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª: {}üéü",
                            base,
                            DEFAULT_BET * BIG_WIN,
                            )),
                    _ => None 
                }
            }
            _ => Some(format!("–¢–æ–≤–∞—Ä–∏—â, —Ç—ã –≤—Å–µ –ø–æ–ª–æ–º–∞–ª!\n–†–∞–∑–∂—É–∫–∏–≤–∞–Ω–∏–µ: {} {}", dice.emoji.as_str(), dice.value)),
         } 
    }
}
